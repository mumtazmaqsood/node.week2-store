{"version":3,"sources":["../src/classes.js"],"names":["fs","path","util","readStoreFile","promisify","readFile","writeStoreFile","writeFile","ShoppingMall","constructor","productArray","showProduct","storePath","err","data","console","log","readProductData","JSON","parse","addStoreProduct","product","appendData","dataExist","hasExist","filter","index","pId","pQuantity","parseInt","map","stringify","appendData1","concat","removeStoreProduct","mappedData","searchStoreProduct","Item","pName","pPrice","Fotex","Netto","Bilka"],"mappings":"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","file":"classes.js","sourcesContent":["\r\n import * as fs from 'fs';\r\n import * as path from 'path';\r\n import * as util from 'util';\r\nimport { NOTFOUND } from 'dns';\r\n const readStoreFile = util.promisify(fs.readFile);\r\n const writeStoreFile = util.promisify(fs.writeFile);\r\n \r\n \r\n    \r\n    \r\n\r\n export class ShoppingMall {\r\n     \r\n    constructor(){\r\n        this.productArray = []; \r\n        \r\n    }\r\n    \r\n   /**\r\n    * @description function get json file path and read it and parse data \r\n    * @param {filepath} storePath \r\n    */\r\n    showProduct(storePath){\r\n        //return fs.readFileSync(storePath , 'utf8');\r\n           /* readStoreFile(storePath, 'utf8').then((data) => {\r\n             this.readProductData = JSON.parse(data)});\r\n            //console.log('showitem',this.readProductData);\r\n            return this.readProductData;\r\n */       //this.readProductData = \"\";\r\n         fs.readFile(storePath, 'utf8', (err, data) => {\r\n           //if(err) throw err;\r\n           if(!data){\r\n               console.log('there is not data');\r\n           }else{\r\n           this.readProductData = JSON.parse(data);\r\n           }\r\n       });\r\n        return this.readProductData    \r\n    }\r\n\r\n    \r\n    /**\r\n     * @description this method enter data into selected file , it checks if there is pId & pQuantity \r\n     * exists, then record updated its pQuantity, otherewise it enter new item \r\n     * @param {array} product \r\n     * @param {filepath(String)} storePath \r\n     */\r\n    addStoreProduct(product, storePath){\r\n         \r\n         let appendData, dataExist, hasExist= false;\r\n\r\n            /* this.readProductData.map(data => {\r\n             if (product.pId === data.pId) {\r\n                 //console.log('Already Exist');\r\n                 return hasExist = false;\r\n             }\r\n         });   \r\n\r\n         if (hasExist === false) {\r\n             console.log('alreadyExist');\r\n         }else {\r\n             appendData = this.readProductData.map(data => `${JSON.stringify(data, null, 2)}`);\r\n                      \r\n             return fs.writeFile(storePath, `[${appendData.concat(JSON.stringify(product, null, 2))}] \\n `,(err, data) =>{\r\n                 if(err) throw err;\r\n                 console.log('Data updated');\r\n             });\r\n         } */\r\n    //Above code is working \r\n\r\n    //trying new code downside\r\n    ////////////////////////////////////////////////////////////////////////\r\n\r\n    dataExist =  this.readProductData.filter((data, index) => {\r\n        \r\n        if(product.pId === data.pId && data.pQuantity >= 0){\r\n         data.pQuantity = parseInt(data.pQuantity) + parseInt(product.pQuantity);  \r\n         hasExist = true;                \r\n        return data;\r\n       }\r\n    });\r\n\r\n    //console.log('Data exist', dataExist);\r\n            if(hasExist=== true){\r\n            appendData =  this.readProductData.map(data => `${JSON.stringify(data,null, 2)}`);\r\n               \r\n            return fs.writeFile(storePath, `[ ${appendData}] \\n `,(err, data) =>{\r\n                if(err) throw err;\r\n                console.log('Data updated');\r\n            });\r\n        }\r\n      else if(hasExist === false){\r\n        //console.log('Product Quantity need to update');\r\n        let appendData1 =  this.readProductData.map(data => `${JSON.stringify(data,null, 2)}`);\r\n        return fs.writeFile(storePath, `[${appendData1.concat(JSON.stringify(product, null, 2))}] \\n `,(err, data) =>{\r\n            if(err) throw err;\r\n            console.log('Data updated');\r\n        });\r\n     } \r\n    }\r\n     /**\r\n      * @description this method get product id & file path, if there is product quantity it decrease it \r\n      * and store in file  \r\n      * @param {number} pId \r\n      * @param {f.path string} storePath \r\n      */\r\n    removeStoreProduct(pId, storePath){\r\n        \r\n        let mappedData;\r\n          \r\n             \r\n        this.readProductData.filter((data, index) => {\r\n            if(pId === data.pId && data.pQuantity > 0){\r\n\r\n             data.pQuantity--;\r\n             return data;                   \r\n            \r\n            }else if(data.pQuantity <= 0){\r\n                console.log('there is not data');\r\n            }\r\n        });\r\n           \r\n            mappedData = this.readProductData.map(data => `${JSON.stringify(data,null, 2)}`);\r\n               \r\n            return fs.writeFile(storePath, `[ ${mappedData}] \\n `,(err, data) =>{\r\n                if(err) throw err;\r\n                console.log('Data updated');\r\n            });\r\n\r\n        \r\n    }\r\n    \r\n    searchStoreProduct(){\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n/** this class used for getting items by user */\r\nexport class Item {  \r\n    constructor(pId, pName, pPrice, pQuantity ){\r\n\r\n        this.pId = pId;\r\n        this.pName = pName;\r\n        this.pPrice = pPrice;\r\n        this.pQuantity = pQuantity;\r\n    }\r\n}\r\n\r\n\r\nclass Fotex extends ShoppingMall{\r\n\r\n}  \r\n\r\nclass Netto extends ShoppingMall{\r\n\r\n}\r\n\r\nclass Bilka extends ShoppingMall{\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* const netto = new ShoppingMall();\r\nconst addItem = new Item(1,'cola', 12, 2);\r\nconst addItem2 = new Item(1,'cola', 12, 2);\r\nnetto.addStoreProduct(addItem);\r\nnetto.addStoreProduct(addItem2);\r\nconsole.log(netto.productArray); */"]}