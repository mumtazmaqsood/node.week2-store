{"version":3,"sources":["../src/index.js"],"names":["http","fs","path","util","nettopath","join","__dirname","fotexpath","bilkapath","netto","fotex","bilka","getQueryString","url","queryParam2","indexOf","split","queryObj","parameter","forEach","data","key","value","server","createServer","req","res","queryParam1","storeName","storeOperation","getItem","nettoAddItem","pId","pName","pPrice","pQuantity","addStoreProduct","writeHead","end","nettoData","showProduct","JSON","stringify","removeStoreProduct","fotexAddItem","fotexData","bilkaAddItem","bilkaData","listen","console","log"],"mappings":"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","file":"index.js","sourcesContent":["import * as http from 'http';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as util from 'util';\r\nimport {ShoppingMall, Item} from './classes';\r\nconst nettopath = path.join(__dirname,'./netto.json');\r\nconst fotexpath = path.join(__dirname,'./fotex.json');\r\nconst bilkapath = path.join(__dirname,'./bilka.json'); \r\n \r\nconst netto = new ShoppingMall();\r\nconst fotex = new ShoppingMall();\r\nconst bilka = new ShoppingMall();\r\n\r\n/**\r\n * @description: it takes url and split it from ?, then create a obj\r\n * @param {queryString} url \r\n */\r\nfunction getQueryString(url){\r\n    \r\n    let queryParam2 = url.indexOf('?') !== -1 ?url.split('?')[1]:null;\r\n    \r\n    \r\n    let queryObj = {};\r\n\r\n    if(queryParam2){\r\n        //console.log('3rd:',queryParam2.split('&'));\r\n        let parameter = queryParam2.split('&');\r\n            parameter.forEach((data) => {\r\n            const key = data.split('=')[0];\r\n            const value = data.split('=')[1];\r\n            queryObj[key] = value;\r\n        });\r\n        \r\n    }\r\n    return queryObj;\r\n} \r\n\r\nconst server = http.createServer((req, res) => {\r\n  \r\n     //it get first part of the url before ?   \r\n    const queryParam1 = req.url.indexOf('?') !== -1 ?req.url.split('?')[0]:req.url;\r\n    \r\n    //console.log('queryParamter Org', queryParam1);\r\n    \r\n    const storeName = queryParam1.split('/')[1];\r\n    //console.log('store Name:', storeName);\r\n    const storeOperation = queryParam1.split('/')[2];\r\n    //console.log('store operation:', storeOperation);\r\n    const getItem = getQueryString(req.url);\r\n    \r\n    switch (storeName) {\r\n        \r\n        case 'netto':\r\n\r\n            switch (storeOperation) {\r\n                case 'additem':\r\n                const nettoAddItem = new Item(getItem.pId, getItem.pName, getItem.pPrice, getItem.pQuantity);\r\n                netto.addStoreProduct(nettoAddItem, nettopath);\r\n                \r\n                res.writeHead(200 ,{'Content-type':'text/json'});\r\n                res.end('Item inserted successfully');        \r\n                break;\r\n              \r\n                case 'showitem':\r\n                const nettoData = netto.showProduct(nettopath);\r\n                res.writeHead(200, {'Content-type': 'text/JSON'});\r\n                res.end(JSON.stringify(nettoData));\r\n                break;\r\n\r\n\r\n                case 'removeitem':\r\n                \r\n                netto.removeStoreProduct(getItem.pId, nettopath);\r\n                res.writeHead(200 ,{'Content-type':'text/json'});\r\n                res.end('Item has been removed ');        \r\n                break;\r\n                           \r\n\r\n            }\r\n            \r\n            res.writeHead(200 ,{'Content-type':'text/html'});\r\n            res.end('netto');        \r\n            \r\n            break;\r\n\r\n        case 'fotex':\r\n\r\n        switch (storeOperation) {\r\n            case 'additem':\r\n                const fotexAddItem = new Item(getItem.pId, getItem.pName, getItem.pPrice, getItem.pQuantity);\r\n                fotex.addStoreProduct(fotexAddItem, fotexpath);\r\n                \r\n                res.writeHead(200 ,{'Content-type':'text/json'});\r\n                res.end('Item inserted successfully');        \r\n                break;\r\n              \r\n                case 'showitem':\r\n                const fotexData = netto.showProduct(fotexpath);\r\n                res.writeHead(200, {'Content-type': 'text/JSON'});\r\n                res.end(JSON.stringify(fotexData));\r\n                break;\r\n\r\n\r\n                case 'removeitem':\r\n                \r\n                fotex.removeStoreProduct(getItem.pId, fotexpath);\r\n                res.writeHead(200 ,{'Content-type':'text/json'});\r\n                res.end('Item has been removed ');        \r\n                break;\r\n                           \r\n\r\n            }\r\n            \r\n            res.writeHead(200 ,{'Content-type':'text/html'});\r\n            res.end('Fotex');        \r\n            \r\n            break;\r\n        \r\n        case 'bilka':\r\n            \r\n        switch (storeOperation) {\r\n\r\n            case 'additem':\r\n            const bilkaAddItem = new Item(getItem.pId, getItem.pName, getItem.pPrice, getItem.pQuantity);\r\n            bilka.addStoreProduct(bilkaAddItem, bilkapath);\r\n            \r\n            res.writeHead(200 ,{'Content-type':'text/json'});\r\n            res.end('Item inserted successfully');        \r\n            break;\r\n          \r\n            case 'showitem':\r\n            const bilkaData = bilka.showProduct(bilkapath);\r\n            res.writeHead(200, {'Content-type': 'text/JSON'});\r\n            res.end(JSON.stringify(bilkaData));\r\n            break;\r\n\r\n\r\n            case 'removeitem':\r\n            \r\n            bilka.removeStoreProduct(getItem.pId, bilkapath);\r\n            res.writeHead(200 ,{'Content-type':'text/json'});\r\n            res.end('Item has been removed ');        \r\n            break;\r\n                       \r\n\r\n        }\r\n        \r\n        res.writeHead(200 ,{'Content-type':'text/html'});\r\n        res.end('Bilka');        \r\n        \r\n        break;\r\n    }\r\n});\r\n\r\nserver.listen(3000);\r\nconsole.log('server listning on port 3000');\r\n"]}